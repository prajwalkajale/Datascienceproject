# -*- coding: utf-8 -*-
"""movierecomdationsystem6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZBsUF2gr99ha-RH-E50WntOwpgjskjLi

# **Movie Recomendation System**

# **objective**

* Personlized Recomendation

* Accuracy


* Scalability
*   User Experience

*  Adaptability

# **Datasource**
https://raw.githubusercontent.com/YBIFoundation/Dataset/main/Movies%20Recommendation.csv

# **Import Library**
"""

import pandas as pd
import numpy as np

"""# **Import Data**"""

movies = pd.read_csv('https://raw.githubusercontent.com/YBIFoundation/Dataset/main/Movies%20Recommendation.csv')

"""# **Describe Data**"""

movies.head()

movies.info()

movies.describe()

movies.shape

movies.columns

"""# **Get Feature Selection**"""

movies_features = movies[['Movie_Genre', 'Movie_Keywords', 'Movie_Tagline', 'Movie_Cast', 'Movie_Director']].fillna('')

movies_features.shape

movies_features

X = movies_features['Movie_Genre'] + ' ' + movies_features['Movie_Keywords'] + ' ' + movies_features['Movie_Tagline'] + ' ' + movies_features['Movie_Cast'] + ' ' + movies_features['Movie_Director']

X

X.shape

"""# Get Feature text Conversions to **Tokens**"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer()

X = tfidf.fit_transform(X)

X.shape

print(X)

"""# **Get Similarity Score form Cosine Similarity**"""

from sklearn.metrics.pairwise import cosine_similarity

Similarity_Score = cosine_similarity(X)

Similarity_Score

Similarity_Score.shape

"""# **Modelling**"""

All_Movies_Title_List = movies['Movie_Title'].tolist()

import difflib

Movie_Recommendation = difflib.get_close_matches('Avatar', All_Movies_Title_List)
print(Movie_Recommendation)

Close_Match = Movie_Recommendation[0]
print(Close_Match)

Index_of_Close_Match_Movie = movies[movies.Movie_Title == Close_Match]['Movie_ID'].values[0]
print(Index_of_Close_Match_Movie)

Recommendation_Score = list(enumerate(Similarity_Score[Index_of_Close_Match_Movie]))
print(Recommendation_Score)

len(Recommendation_Score)

"""# **Model Evaluation**"""

Sorting_similar_Movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)
print(Sorting_similar_Movies)

print('Top 30 Movies Suggested for You : \n')
i = 1
for movie in Sorting_similar_Movies:
  index = movie[0]
  title_from_index = movies[movies.index==index]['Movie_Title'].values[0]
  if (i<31):
    print(i, '.',title_from_index)
    i+=1

"""# **Prediction**"""

Movie_Name = input(' Enter your favourite movie name : ')
list_of_all_titles = movies['Movie_Title'].tolist()
Find_Close_Match = difflib.get_close_matches(Movie_Name, list_of_all_titles)
Close_Match = Find_Close_Match[0]
Index_of_Movie = movies[movies.Movie_Title == Close_Match]['Movie_ID'].values[0]

Recommendation_Score = list(enumerate(Similarity_Score[Index_of_Movie]))
Sorted_Similar_Movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)
print('Top 10 Movies Suggested for You : \n')
i = 1
for movie in Sorted_Similar_Movies:
  index = movie[0]
  title_from_index = movies[movies.Movie_ID==index]['Movie_Title'].values[0]
  if (i<11):
    print(i, '.',title_from_index)
    i+=1

"""# **Explanation**

A movie recommendation system is a type of filtering system designed to suggest films to users based on their preferences, past behavior, or similarity to other users' tastes.
Overall, movie recommendation systems aim to enhance user experience by helping users discover new movies they are likely to enjoy, thereby increasing engagement and satisfaction.
"""